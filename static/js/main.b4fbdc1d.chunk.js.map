{"version":3,"sources":["helpers.ts","Components/TextToCopy.tsx","Components/TextField.tsx","Components/Box.tsx","Components/Result.tsx","App.tsx","useInterval.ts","serviceWorker.ts","index.tsx"],"names":["numberOfWords","text","split","filter","word","length","numberOfErrors","typed","toCopy","typedWords","index","getPropertyValue","element","property","Number","getComputedStyle","replace","TextToCopy","textToCopy","textTyped","containerRef","useRef","useEffect","container","current","lastWord","children","scroll","top","left","behavior","HTMLElement","lastWordOffset","offsetTop","padding","scrollTop","clientHeight","ref","className","map","key","style","color","TextField","React","forwardRef","props","onChange","onPaste","e","preventDefault","value","placeholder","autoFocus","Box","time","label","error","Result","errors","restart","close","words","accuracy","speed","Math","floor","onClick","number","App","useState","setTextToCopy","setTextTyped","timing","toggleTiming","setTime","showResult","toggleShowResult","textareaRef","getText","axios","get","then","response","data","focus","callback","delay","savedCallback","id","setInterval","clearInterval","useInterval","formatTime","window","innerWidth","target","href","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b4fbdc1d.chunk.js","sourcesContent":["export function formatTime(time: number) {\n  return `${Math.floor(time / 60)}:${time % 60 < 10 ? `0${time % 60}` : time % 60}`;\n}\n\nexport function numberOfWords(text: string) {\n  return text.split(\" \").filter(word => word !== \"\").length;\n}\n\nexport function numberOfErrors(typed: string, toCopy: string) {\n  const typedWords = typed.split(\" \");\n  return typedWords.filter((word: string, index: number) => index !== typedWords.length - 1 && word !== \"\" && word !== toCopy.split(\" \")[index]).length;\n}\n\nexport function formatText(text: string) {\n  return text.replace(/ {2}/g, ' ').replace(/“|”/g, '\"').replace(/’/g, \"'\").replace(/$(\\r|\\n{2})(?=.)/gm, \" \");\n}\n\nexport function getPropertyValue(element: HTMLElement, property: any) {\n  return Number(getComputedStyle(element)[property]?.replace('px', ''));\n}","import React, { useEffect, useRef } from 'react';\nimport { getPropertyValue } from '../helpers';\n\ninterface Props {\n  textToCopy : string,\n  textTyped: string\n}\n\nexport const TextToCopy: React.FC<Props> = ({ textToCopy, textTyped }) => {\n    let containerRef = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n      const container = containerRef?.current;\n      const lastWord = container?.children?.[textTyped.split(\" \").length - 1];\n      if (textTyped === \"\") container?.scroll({ top: 0, left: 0, behavior: 'smooth' });\n      if (container && lastWord instanceof HTMLElement) {\n        const lastWordOffset = lastWord?.offsetTop;\n        const padding = getPropertyValue(container, 'paddingTop');\n        const lineHeight = getPropertyValue(container, 'lineHeight');\n        if (lastWordOffset + padding + lineHeight > container?.scrollTop + container?.clientHeight) {\n          container.scroll({ top: lastWordOffset - padding, left: 0, behavior: 'smooth' });\n        }\n      }\n    }, [textTyped])\n\n  return (\n    <div ref={containerRef} className=\"text-to-copy\">\n      {textToCopy.length > 0 ? textToCopy.split(\" \").map((word: string, index: number) => index === textTyped.split(\" \").length - 1 ? (\n        <span key={index} style={{ color: 'green' }}> {word}</span>\n      ) : (\n        <span key={index} style={{ color: textTyped.split(\" \")[index] === word ? 'grey' : 'black'}}> {word}</span>\n      )) : \"Loading text...\"}\n    </div>\n  )\n}","import React from \"react\";\n\ninterface Props {\n  onChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void,\n  textTyped: string\n}\n\nexport const TextField = React.forwardRef<HTMLTextAreaElement, Props>((props, ref) => {\n  const { onChange, textTyped } = props;\n\n  return (\n    <textarea ref={ref} onChange={onChange} onPaste={e => e.preventDefault()} value={textTyped} placeholder=\"Start typing to begin...\" autoFocus />\n  )\n});","import React from \"react\";\n\ninterface Props {\n  time?: boolean,\n  label?: string,\n  error?: boolean\n}\n\nexport const Box: React.FC<Props> = ({ children, time, label, error }) => {\n\n  return (\n    <div className={`box${time ? \" time-box\" : (error && Number(children) > 0) ? \" error-box\" : \"\"}`}>\n      <div className=\"box-label\">{label}</div>\n      {children}\n    </div>\n  )\n}","import React from \"react\";\nimport { numberOfWords } from '../helpers';\nimport { FaTimes, FaWalking, FaBicycle, FaTractor, FaCarSide, FaPlane } from \"react-icons/fa\";\n\ninterface Props {\n  textTyped: string,\n  errors: number,\n  restart: () => void,\n  close: () => void\n}\n\nexport const Result: React.FC<Props> = ({ textTyped, errors, restart, close }) => {\n  const words = numberOfWords(textTyped);\n  const accuracy = (words - errors) / words;\n  const speed = Math.floor(words * accuracy);\n  const labels = [20,40,60,80];\n\n  return (\n    <div className=\"overlay\">\n      <div className=\"modal\">\n        <div onClick={close} className=\"close-button\"><FaTimes /></div>\n        <div className=\"results-wrapper\">\n          <div className=\"result-box\">\n            <p>{words} word{words > 1 && \"s\"} typed</p>\n            <small>{textTyped.length} character{textTyped.length > 1 && \"s\"}</small>\n          </div>\n          <div className=\"result-box\">\n            <p>{Math.floor(accuracy * 100)}% accuracy</p>\n            <small>{errors} error{errors > 1 && \"s\"}</small>\n          </div>\n        </div>\n        <h3>Adjusted speed: {speed} WPM</h3>\n        <div className=\"result-chart\">\n          <div className=\"icon-container\"><FaWalking /></div>\n          <div className=\"icon-container\"><FaBicycle /></div>\n          <div className=\"icon-container\"><FaTractor /></div>\n          <div className=\"icon-container\"><FaCarSide /></div>\n          <div className=\"icon-container\"><FaPlane /></div>\n          <div className=\"result-marker\" style={{ left: `${speed * 3}px` }} />\n        </div>\n        <div className=\"chart-labels\">\n          {labels.map((number, index) => <span key={index}>{number}</span>)}\n        </div>\n        <button onClick={restart}>Try again</button>\n      </div>\n    </div>\n  )\n}","import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport useInterval from './useInterval';\nimport { TextToCopy } from './Components/TextToCopy';\nimport { TextField } from './Components/TextField';\nimport { Box } from './Components/Box';\nimport { Result } from './Components/Result';\nimport { formatTime, numberOfWords, numberOfErrors, formatText } from './helpers';\nimport { FaKeyboard, FaHistory } from \"react-icons/fa\";\n\nfunction App() {\n  const endpoint = \"https://litipsum.com/api/5\";\n  const [textToCopy, setTextToCopy] = useState<string>(\"\");\n  const [textTyped, setTextTyped] = useState<string>(\"\");\n  const [timing, toggleTiming] = useState<boolean>(false);\n  const [time, setTime] = useState<number>(60);\n  const [showResult, toggleShowResult] = useState<boolean>(false);\n  let textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  useInterval(() => {\n    setTime(time - 1);\n    if (time <= 1) {\n      toggleTiming(false);\n      toggleShowResult(true);\n    }\n  }, timing ? 1000 : null);\n\n  function getText() {\n    axios.get(endpoint)\n      .then(response => \n        setTextToCopy(formatText(response.data))\n      )\n  }\n\n  function type(e: React.ChangeEvent<HTMLTextAreaElement>) {\n    if (textTyped === \"\") toggleTiming(true);\n    if (time !== 0) setTextTyped(e.target.value);\n  }\n\n  function restart() {\n    setTextTyped(\"\");\n    setTime(60);\n    toggleShowResult(false);\n    getText();\n    if (textareaRef?.current) textareaRef.current.focus();\n  }\n\n  useEffect(getText, []);\n\n  return (\n    <>\n      <h1><FaKeyboard /> Typing Speed Test <FaKeyboard /></h1>\n      <p className=\"instructions\">Copy passages from classic works of literature to find your average words per minute.</p>\n      <div className=\"wrapper\">\n        <div className=\"box-container\">\n          <Box time>{formatTime(time)}</Box>\n          <Box label=\"Words\">{numberOfWords(textTyped)}</Box>\n          <Box label=\"Errors\" error>{numberOfErrors(textTyped, textToCopy)}</Box>\n          <button className=\"cancel-button\" onClick={restart}>{window?.innerWidth > 700 ? \"New text\" : <FaHistory />}</button>\n        </div>\n        <div className=\"text-container\">\n          <TextToCopy textToCopy={textToCopy} textTyped={textTyped} />\n          <TextField ref={textareaRef} onChange={type} textTyped={textTyped} />\n        </div>\n        {showResult && <Result textTyped={textTyped} errors={numberOfErrors(textTyped, textToCopy)} restart={restart} close={() => toggleShowResult(false)} />}\n      </div>\n      <div className=\"credit\">Text extracts from <a href=\"https://litipsum.com/\">Lit Ipsum</a></div>\n    </>\n  );\n}\n\nexport default App;\n","import { useEffect, useRef } from 'react';\n\ntype Callback = () => ( unknown | void );\n\nexport default function useInterval(callback: Callback, delay: number | null) {\n  const savedCallback = useRef<Callback | null>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      if (savedCallback.current) savedCallback?.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}