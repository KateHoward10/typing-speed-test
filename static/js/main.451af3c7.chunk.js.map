{"version":3,"sources":["Components/TextToCopy.tsx","Components/TextField.tsx","Components/Box.tsx","Components/Result.tsx","helpers.ts","App.tsx","useInterval.js","serviceWorker.ts","index.tsx"],"names":["TextToCopy","textToCopy","textTyped","containerRef","useRef","useEffect","container","current","lastWord","children","split","length","HTMLElement","lastWordOffset","offsetTop","scrollTop","scroll","top","left","behavior","ref","className","map","word","index","key","style","color","TextField","React","forwardRef","props","onChange","value","placeholder","autoFocus","Box","time","label","error","Number","Result","words","errors","restart","accuracy","speed","Math","floor","number","onClick","numberOfWords","text","filter","numberOfErrors","typed","toCopy","typedWords","App","useState","setTextToCopy","setTextTyped","timing","toggleTiming","setTime","showResult","toggleShowResult","textareaRef","getText","axios","get","then","response","data","replace","focus","callback","delay","savedCallback","id","setInterval","clearInterval","useInterval","formatTime","window","innerWidth","e","target","href","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.451af3c7.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\n\ninterface Props {\n  textToCopy : string,\n  textTyped: string\n}\n\nexport const TextToCopy: React.FC<Props> = ({ textToCopy, textTyped }) => {\n    let containerRef = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n      const container = containerRef?.current;\n      const lastWord = container?.children?.[textTyped.split(\" \").length - 1];\n      if (container && lastWord instanceof HTMLElement) {\n        const lastWordOffset = lastWord?.offsetTop;\n        if (lastWordOffset - 10 !== container?.scrollTop) {\n          container.scroll({ top: lastWordOffset - 10, left: 0, behavior: 'smooth' });\n        }\n      }\n    }, [textTyped])\n\n  return (\n    <div ref={containerRef} className=\"text-to-copy\">{textToCopy.length > 0 ? textToCopy.split(\" \").map((word: string, index: number) => index === textTyped.split(\" \").length - 1 ? (\n        <span key={index} style={{ color: 'green' }}> {word}</span>\n    ) : (\n      <span key={index} style={{ color: textTyped.split(\" \")[index] === word ? 'grey' : 'black'}}> {word}</span>\n    )) : \"Loading text...\"}</div>\n  )\n}","import React from \"react\";\n\ninterface Props {\n  onChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void,\n  textTyped: string\n}\n\nexport const TextField = React.forwardRef<HTMLTextAreaElement, Props>((props, ref) => {\n  const { onChange, textTyped } = props;\n  \n  return (\n    <textarea ref={ref} onChange={onChange} value={textTyped} placeholder=\"Start typing to begin...\" autoFocus />\n  )\n});","import React from \"react\";\n\ninterface Props {\n  time?: boolean,\n  label?: string,\n  error?: boolean\n}\n\nexport const Box: React.FC<Props> = ({ children, time, label, error }) => {\n\n  return (\n    <div className={`box${time ? \" time-box\" : (error && Number(children) > 0) ? \" error-box\" : \"\"}`}>\n      <div className=\"box-label\">{label}</div>\n      {children}\n    </div>\n  )\n}","import React from \"react\";\nimport { FaTimes, FaWalking, FaBicycle, FaTractor, FaCarSide, FaPlane } from \"react-icons/fa\";\n\ninterface Props {\n  words: number,\n  errors: number,\n  restart: () => void\n}\n\nexport const Result: React.FC<Props> = ({ words, errors, restart }) => {\n  const accuracy = (words - errors) / words;\n  const speed = Math.floor(words * accuracy);\n  const labels = [20,40,60,80];\n\n  return (\n    <div className=\"overlay\">\n      <div className=\"modal\">\n        <p>{words} words typed <FaTimes /> {Math.floor(accuracy * 100)}% accuracy</p>\n        <h3>Adjusted speed: {speed} WPM</h3>\n        <div className=\"result-chart\">\n          <div className=\"icon-container\"><FaWalking /></div>\n          <div className=\"icon-container\"><FaBicycle /></div>\n          <div className=\"icon-container\"><FaTractor /></div>\n          <div className=\"icon-container\"><FaCarSide /></div>\n          <div className=\"icon-container\"><FaPlane /></div>\n          <div className=\"result-marker\" style={{ left: `${speed * 3}px` }} />\n        </div>\n        <div className=\"chart-labels\">\n          {labels.map(number => <span>{number}</span>)}\n        </div>\n        <button onClick={restart}>Try again</button>\n      </div>\n    </div>\n  )\n}","export function formatTime(time: number) {\n  return `${Math.floor(time / 60)}:${time % 60 < 10 ? `0${time % 60}` : time % 60}`;\n}\n\nexport function numberOfWords(text: string) {\n  return text.split(\" \").filter(word => word !== \"\").length;\n}\n\nexport function numberOfErrors(typed: string, toCopy: string) {\n  const typedWords = typed.split(\" \");\n  return typedWords.filter((word: string, index: number) => index !== typedWords.length - 1 && word !== \"\" && word !== toCopy.split(\" \")[index]).length;\n}\n\nexport function formatText(text: string) {\n  return text.replace(/ {2}/g, ' ').replace(/“|”/g, '\"').replace(/’/g, \"'\").replace(/$(\\r|\\n{2})(?=.)/gm, \" \");\n}","import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport useInterval from './useInterval';\nimport { TextToCopy } from './Components/TextToCopy';\nimport { TextField } from './Components/TextField';\nimport { Box } from './Components/Box';\nimport { Result } from './Components/Result';\nimport { formatTime, numberOfWords, numberOfErrors, formatText } from './helpers';\nimport { FaHistory } from \"react-icons/fa\";\n\nfunction App() {\n  const endpoint = \"https://litipsum.com/api/5\";\n  const [textToCopy, setTextToCopy] = useState<string>(\"\");\n  const [textTyped, setTextTyped] = useState<string>(\"\");\n  const [timing, toggleTiming] = useState<boolean>(false);\n  const [time, setTime] = useState<number>(60);\n  const [showResult, toggleShowResult] = useState<boolean>(false);\n  let textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  useInterval(() => {\n    setTime(time - 1);\n    if (time <= 1) {\n      toggleTiming(false);\n      toggleShowResult(true);\n    }\n  }, timing ? 1000 : null);\n\n  function getText() {\n    axios.get(endpoint)\n      .then(response => \n        setTextToCopy(formatText(response.data))\n      )\n  }\n\n  function type(e: any) {\n    if (textTyped === \"\") toggleTiming(true);\n    if (time !== 0) setTextTyped(e.target.value);\n  }\n\n  function restart() {\n    setTextTyped(\"\");\n    setTime(60);\n    toggleShowResult(false);\n    getText();\n    if (textareaRef?.current) textareaRef.current.focus();\n  }\n\n  useEffect(getText, []);\n\n  return (\n    <>\n      <h1>Typing Speed Test</h1>\n      <div className=\"wrapper\">\n        <div className=\"box-container\">\n          <Box time>{formatTime(time)}</Box>\n          <Box label=\"Words\">{numberOfWords(textTyped)}</Box>\n          <Box label=\"Errors\" error>{numberOfErrors(textTyped, textToCopy)}</Box>\n          <button className=\"cancel-button\" onClick={restart}>{window?.innerWidth > 700 ? \"New text\" : <FaHistory />}</button>\n        </div>\n        <div className=\"text-container\">\n          <TextToCopy textToCopy={textToCopy} textTyped={textTyped} />\n          <TextField ref={textareaRef} onChange={type} textTyped={textTyped} />\n        </div>\n        {showResult && <Result words={numberOfWords(textTyped)} errors={numberOfErrors(textTyped, textToCopy)} restart={restart} />}\n      </div>\n      <div className=\"credit\">Text extracts from <a href=\"https://litipsum.com/\">Lit Ipsum</a></div>\n    </>\n  );\n}\n\nexport default App;\n","import { useEffect, useRef } from 'react';\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}